<?php
/**
 * Implements hook_feeds_processor_targets_alter().
 */
function feeds_paragraphs_mapper_feeds_processor_targets($entity_type, $bundle) {
  $targets = array();

  $entity_fields = field_info_instances($entity_type, $bundle);


  foreach($entity_fields as $field_name => $field_data) {
    $field_info = field_info_field($field_name);
    if ($field_info['type'] === 'paragraphs'){
      $targets["{$field_name}:add"] = array(
        'name' => t('!field_name (Add paragraph)', array('!field_name' => $field_data['label'])),
        'description' => t('Add a paragraph field to %field_name', array('%field_name' => $field_data['label'])),
        'callback' => 'feeds_paragraphs_mapper_feeds_paragraph_callback',
        'form_callbacks' => array('feeds_paragraphs_mapper_select_paragraph_form_callback'),
        'summary_callbacks' => array('feeds_paragraphs_mapper_summary_callback'),
        'custom_settings' => array('bundle'=>$bundle, 'entity_type' => $entity_type),
      );
    }
  }

  return $targets;
}

/**
 * Mapping callback for the "Basic paragraph for field_s_paragraph" target
 */
function feeds_paragraphs_mapper_feeds_paragraph_callback($source, $entity, $target, $value, $mapping) {
  list($field_name, $action) = explode(':', $mapping['target']);

  if (!empty($mapping['clear_existing'])) {
    $entity->{$field_name}[$entity->language] = array();
  }
  if (!empty($mapping['paragraph_type'])) {
    $new_item = entity_create('paragraphs_item', array('bundle' => $mapping['paragraph_type'], 'field_name' => $field_name));
    $new_item->setHostEntity('node', $entity, $entity->language);

    if (!empty($value[0]) && !empty($mapping['field_name'])) {
      // TODO - set format if needed
	  if (isset($mapping['unique_id']) && $mapping['unique_id']) {
		  //Take the machine name of the target and make the references to the database
		  $target2 = preg_replace('/:.*/', '', $target);
		  $targetField = 'field_data_'.$target2;
		  $targetValue = $target2.'_value';
		  
		  $query = db_select('field_data_'.$mapping['field_name'], 'f');
		  $query->innerjoin($targetField , 'n', 'f.entity_id = n.'.$targetValue);
		  $query->fields('f', array($mapping['field_name'].'_value'))
			->condition('f.bundle', $mapping['paragraph_type'])
			->condition($mapping['field_name'].'_value', '%' . db_like($value[0]), 'LIKE');
		
		  $result = $query->execute();
		  $contents = array();
		  foreach($result as $r)
		  {
		    $contents[] = $r;
		  }
		  if(count($contents))
		  {
			watchdog('feeds_paragraphs_mapper', '<pre>' . $value[0] . ' is already in the DB</pre>');
		  }
		  else{
			$new_item->{$mapping['field_name']}[$entity->language][] = array(
				'value' => $value[0],
			);
		  }
	  }
	  else{
		  $new_item->{$mapping['field_name']}[$entity->language][] = array(
			'value' => $value[0],
		  );
	  }
    }
  }
}



/**
 * @return array
 *   The per mapping configuration form. Once the form is saved, $mapping will
 *   be populated with the form values.
 *
 * @see my_module_summary_callback()
 */
function feeds_paragraphs_mapper_select_paragraph_form_callback(array $mapping, $target, array $form, array $form_state) {
  // TODO - better field selection with added options
  // TODO - add to existing field

  $settings = $target['custom_settings'];
  list($field_name, $action) = explode(':', $mapping['target']);
  $field_info = field_info_field($field_name);
  $field_instance = field_info_instance($settings['entity_type'], $field_name, $settings['bundle']);

  $selectedParagraphFields = new stdClass();
  $available_paragraphs = _feeds_paragraphs_mapper_get_paragraph_options($field_instance, $field_info);
  
  $availableParagraphFields = field_info_instances($entity_type = 'paragraphs_item', $bundle_name = $mapping['paragraph_type']);
  
  foreach($availableParagraphFields as $availableParagraphField){
	if (($availableParagraphField['widget']['type'] == 'text_textfield') || ($availableParagraphField['widget']['type'] == 'text_textarea')){
		dsm($availableParagraphField);
	  $selectedParagraphFields->$availableParagraphField['field_name'] = $availableParagraphField['field_name'];
	}
  } 

  return array(
    'clear_existing' => array(
      '#type' => 'checkbox',
      '#title' => t('Clear out all existing paragraphs from this field'),
      '#default_value' => $mapping['clear_existing'],
    ),
    'add_to' => array(
      '#type' => 'select',
      '#title' => t('Add to'),
      '#options' => array(
        '' => t('New'),
        'first' => t('First'),
        'last' => t('Last'),
      ),
      '#default_value' => $mapping['add_to'],
    ),
    'paragraph_type' => array(
      '#type' => 'select',
      '#title' => t('Select paragraph bundle'),
      '#options' => $available_paragraphs,
      '#default_value' => $mapping['paragraph_type'],
	  '#description' => t('You have to Save/Update the configuration and then edit it again to be able to select the field name below'),
    ),
    'field_name' => array(
      '#type' => 'select',
      '#title' => t('select the field name'),
      '#options' => $selectedParagraphFields,
      '#default_value' => $mapping['field_name'],
      '#description' => t('Select the machine name. If you do not see anything you either have not updated the config after selecting the pargraph type, or your chosen paragraph type does not contain text fields'),
    ),
    'unique_id' => array(
      '#type' => 'checkbox',
      '#title' => t('Unique Identifier'),
      '#default_value' => $mapping['unique_id'],
	  '#description' => t('If you select this. Then the paragraph will check for duplicates.'),
    ),
  );
}

function _feeds_paragraphs_mapper_get_paragraph_options($field_instance, $field_info){
  $available_bundles = paragraphs_bundle_load();
  $allowed_bundles = array_filter($field_instance['settings']['allowed_bundles'], '_feeds_paragraphs_mapper_enabled_filter');

  // Enable all paragraph bundles if none are explicitly selected.
  if (count($allowed_bundles) === 0) {
    $allowed_bundles = $field_instance['settings']['allowed_bundles'];
  }
  
  foreach($allowed_bundles as $machine_name => &$value) {
    $value = t($available_bundles[$machine_name]->name);
  }
  // TODO - weighting

  return $allowed_bundles;

}
function _feeds_paragraphs_mapper_get_paragraphFields($entity_type = NULL, $bundle_name = NULL) {
  $cache = _field_info_field_cache();

  if (!isset($entity_type)) {
    return $cache->getInstances();
  }
  if (!isset($bundle_name)) {
    return $cache->getInstances($entity_type);
  }

  return $cache->getBundleInstances($entity_type, $bundle_name);
}

// Remove disabled bundles.
function _feeds_paragraphs_mapper_enabled_filter($value){
  return ($value !== -1);
}

/**
 * @param array $mapping
 *   Associative array of the mapping settings.
 * @param string $target
 *   Array of target settings, as defined by the processor or
 *   hook_feeds_processor_targets_alter().
 * @param array $form
 *   The whole mapping form.
 * @param array $form_state
 *   The form state of the mapping form.
 *
 * @return string
 *   Returns, as a string that may contain HTML, the summary to display while
 *   the full form isn't visible.
 *   If the return value is empty, no summary and no option to view the form
 *   will be displayed.
 */
function feeds_paragraphs_mapper_summary_callback(array $mapping, $target, array $form, array $form_state) {
  if (empty($mapping['paragraph_type'])) {
    return t('Not configured');
  }
  else {
	  
    $output = '';
    if (isset($mapping['clear_existing']) && $mapping['clear_existing']){
      $output .= t('Clear out any existing paragraphs.') . '<br>';
    }
    $output .= t('Create a %paragraph_type paragraph', array('%paragraph_type' => $mapping['paragraph_type']));
    if (!empty($mapping['field_name'])) {
      $output .= ' '. t('and set the %field_name field', array('%field_name' => $mapping['field_name']));
    }
	if (isset($mapping['unique_id']) && $mapping['unique_id']) {
      $output .= t('<br><b>Unique</b>.') . '<br>';
    }

    return $output;
  }
}
